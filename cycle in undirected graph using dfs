class Solution {
    public static void dfs(int node,boolean[] vis,List<List<Integer>> adj,int parent,boolean[] ans){
        vis[node]=true;
        
        for(Integer it:adj.get(node)){
            if(it!=parent && vis[it]){
                ans[0]=true;
            }
            else if(!vis[it]){
                dfs(it,vis,adj,node,ans);
            }
        }
    }
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        List<List<Integer>> adj=new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        
        for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        
        boolean[] vis=new boolean[V];
        Arrays.fill(vis,false);
        
        boolean[] ans=new boolean[]{false};
        
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs(i, vis, adj, -1, ans);
            }
        }
        
        return ans[0];
    }
}
