class Solution {
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        List<List<Integer>> adj=new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        
        for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        
        boolean[] vis=new boolean[V];
        Arrays.fill(vis,false);
        
        Queue<int[]> q=new LinkedList<>();
        
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                q.offer(new int[]{i,-1});
                vis[i]=true;
                
                while(!q.isEmpty()){
                    int[] node=q.poll();
                    
                    for(Integer it:adj.get(node[0])){
                        if(node[1]!=it && vis[it]){
                            return true;
                        }
                        else if(!vis[it]){
                            q.offer(new int[]{it,node[0]});
                            vis[it]=true;
                        }
                    }
                }
            }
        }
        
        return false;
    }
}
