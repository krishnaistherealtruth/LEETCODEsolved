class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i =0;i<graph.length;i++){
            adj.add(new ArrayList<>());
        }
        for(int i =0;i<graph.length;i++){
            for(int j=0;j<graph[i].length;j++){
                adj.get(graph[i][j]).add(i);
            }
        }
        int V=graph.length;
         List<Integer> ans=new ArrayList<>();
        
        Queue<Integer> q=new LinkedList<>();
        int[] indeg=new int[V];
        Arrays.fill(indeg,0);
        for(int i=0;i<V;i++){
            for(Integer it:adj.get(i)){
                indeg[it]++;
            }
        }
        for(int i=0;i<V;i++){
            if(indeg[i]==0) q.offer(i);
        }
        while(!q.isEmpty()){
            int node=q.poll();
            ans.add(node);

            for(Integer it:adj.get(node)){
                indeg[it]--;
                if(indeg[it]==0){
                    q.offer(it);
                }
            }
        }
        Collections.sort(ans);
        return ans;
    }
}
