/*
class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}
*/

class Solution {
    static void left(Node node,ArrayList<Integer> ans){
        if(node==null) return;
        if(!ans.contains(node.data)){
            ans.add(node.data);
            if(node.left!=null) left(node.left,ans);
            else left(node.right,ans);
        }
    }
    static void leaf(Node node,ArrayList<Integer> ans){
        if(node==null) return;
        
        leaf(node.left,ans);
        leaf(node.right,ans);
        
        if(!ans.contains(node.data)){
            if(node.left==null && node.right==null){
                ans.add(node.data);
            }
        }
    }
    static void right(Node node,ArrayList<Integer> ans){
        if(node==null) return;
        
       if(node.right!=null)  right(node.right,ans);
       else right(node.left,ans);
        
        if(!ans.contains(node.data)){
            ans.add(node.data);
        }
    }
    ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
        ArrayList<Integer> ans=new ArrayList<>();
        if(node==null) return ans;
        ans.add(node.data);
        
        left(node.left,ans);
        leaf(node,ans);
        right(node.right,ans);
        return ans;
    }
}
