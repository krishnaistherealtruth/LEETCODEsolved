class Solution {
    public static int memo(int n,int i,int[][] dp,List<List<Integer>> triangle){
        if(n==triangle.size()-1){
            return triangle.get(n).get(i);
        }

        if(dp[n][i]!=-1) return dp[n][i];

        int same=triangle.get(n).get(i)+memo(n+1,i,dp,triangle);
        
        int front=triangle.get(n).get(i)+memo(n+1,i+1,dp,triangle);

        return dp[n][i]=Math.min(same,front);
    }
    public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();

        int[][] dp=new int[n][triangle.get(n-1).size()];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }

        return memo(0,0,dp,triangle);
    }
}


#without memoization

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();

        int[][] dp=new int[n][triangle.get(n-1).size()];
        for(int i=0;i<n;i++){
            dp[n-1][i]=triangle.get(n-1).get(i);
        }
            for(int j=n-2;j>=0;j--){
               for(int i=j;i>=0;i--){
                 int same=triangle.get(j).get(i)+dp[j+1][i];
                 int back=triangle.get(j).get(i)+dp[j+1][i+1];
                dp[j][i]=Math.min(same,back);
               }
            }
        return dp[0][0];
    }
}


#space optimized

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();

        int[] prev=new int[n];
        for(int i=0;i<n;i++){
            prev[i]=triangle.get(n-1).get(i);
        }
        
            for(int j=n-2;j>=0;j--){
                int[] curr=new int[triangle.get(j).size()];
                Arrays.fill(curr,0);
                for(int i=j;i>=0;i--){
                    int same=triangle.get(j).get(i)+prev[i];
                    int back=triangle.get(j).get(i)+prev[i+1];
                    curr[i]=Math.min(same,back);
                }
                prev=curr;
            }
        return prev[0];
    }
}
