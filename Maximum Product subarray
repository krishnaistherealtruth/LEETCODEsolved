class Solution {
    public static int[] memo(int[] nums,int[][] dp,int ind){

        if(dp[ind][0]!=Integer.MIN_VALUE){
            return dp[ind];
        }
        if(ind==0){
            dp[0][0]=nums[0];
            dp[0][1]=nums[0];
            return dp[0];
        }
        
        int[] prev=memo(nums,dp,ind-1);
       int prevmax=prev[0];
       int prevmin=prev[1];

        int max=Math.max(nums[ind],Math.max(nums[ind]*prevmax,nums[ind]*prevmin));
        int min=Math.min(nums[ind],Math.min(nums[ind]*prevmax,nums[ind]*prevmin));

        dp[ind][0]=max;
        dp[ind][1]=min;

        return dp[ind];

    }
    public int maxProduct(int[] nums) {

        int[][] dp=new int[nums.length][2];

        for(int[] row:dp){
            Arrays.fill(row,Integer.MIN_VALUE);
        }

        int max=nums[0];
        for(int i=0;i<nums.length;i++){
            int[] sil=memo(nums,dp,i);
            max=Math.max(max,sil[0]);
        }
        return max;
    }
}
