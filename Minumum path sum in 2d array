class Solution {
    public static int memo(int i,int j,int[][] dp,int[][] grid){
        if(i==0 && j==0) return grid[i][j];

        if(i<0 || j<0) return 0;

        if(dp[i][j]!=-1) return dp[i][j];

        int up=Integer.MAX_VALUE;
        int left=Integer.MAX_VALUE;
        if(i-1>=0) up=grid[i][j]+memo(i-1,j,dp,grid);
        if(j-1>=0) left=grid[i][j]+memo(i,j-1,dp,grid);

        return dp[i][j]=Math.min(up,left);
    }
    public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int[][] dp=new int[m][n];
        for(int[] rows:dp){
            Arrays.fill(rows,-1);
        }

        return memo(m-1,n-1,dp,grid);
    }
}
