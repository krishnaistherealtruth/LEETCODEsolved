class Solution {
    public int myAtoi(String s) {
        if(s.isEmpty()) return 0;
        Stack<Character> st=new Stack<>();
        Stack<Integer> sign=new Stack<>();
        long ans=0;
        for(int i=0;i<s.length();i++){
            if(st.isEmpty() && sign.isEmpty()){
                if(s.charAt(i)==' ') continue;

                else if(s.charAt(i)=='-') sign.push(-1);

                else if(s.charAt(i)=='+') sign.push(1);

                else if(s.charAt(i)<='9' && s.charAt(i)>='0'){
                    st.push(s.charAt(i));
                }
                else{
                    return 0;
                }
            }
            else{
                if(s.charAt(i)<='9' && s.charAt(i)>='0'){
                    st.push(s.charAt(i));
                }
                else{
                    break;
                }
            }
        }
        Stack<Character> temp=new Stack<>();
        while(!st.isEmpty()){
            temp.push(st.pop());
        }
        if(sign.isEmpty()){
            sign.push(1);
        }
        while(!temp.isEmpty()){
            ans=ans*10+(temp.pop()-'0');
            
            long rand=ans*sign.peek();
            if(rand>Integer.MAX_VALUE) return Integer.MAX_VALUE;
            if(rand<Integer.MIN_VALUE) return Integer.MIN_VALUE;
        }
        ans=ans*sign.pop();
        

        return (int)ans;
    }
}
