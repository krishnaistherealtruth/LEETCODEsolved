// User function Template for Java
class Pair{
    int node;
    int wt;
    Pair(int _node,int _wt){
        this.node=_node;
        this.wt=_wt;
    }
}
class Solution {
    public static void dfs(int ind,boolean[] vis,List<List<Pair>> adj,Stack<Integer> st){
        vis[ind]=true;
        
        for(Pair pair:adj.get(ind)){
            int node=pair.node;
            if(!vis[node]){
                dfs(node,vis,adj,st);
            }
        }
        st.push(ind);
    }
    public int[] shortestPath(int V, int E, int[][] edges) {
        // Code here
        int[] ans=new int[V];
        Arrays.fill(ans,Integer.MAX_VALUE);
        ans[0]=0;
        
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(new Pair(edges[i][1],edges[i][2]));
        }
        
        
        boolean[] vis=new boolean[V];
        Arrays.fill(vis,false);
        Stack<Integer> st=new Stack<>();
        
        for(int i=0;i<V;i++){
            if(!vis[i]){
                dfs(i,vis,adj,st);
            }
        }
        
        while(!st.isEmpty()){
            int node=st.pop();
            if(ans[node]==Integer.MAX_VALUE) continue;
            for(Pair pair:adj.get(node)){
                int dt=ans[node];
                int it=pair.node;
                int wt=pair.wt;
                if(dt+wt<ans[it]){
                    ans[it]=dt+wt;
                }
            }
        }
        for(int i=0;i<V;i++){
            if(ans[i]==Integer.MAX_VALUE) ans[i]=-1;
        }
        
        return ans;
    }
}
