#Not for larger input size 

class Solution {
    public static int memo(int n,int i,int[][] dp,int[][] matrix){
        if(i<0 || i>=matrix.length) return (int)1e8;
        if(n==matrix.length-1) return matrix[n][i];

        if(dp[n][i]!=-1) return dp[n][i];

        int same=matrix[n][i]+memo(n+1,i,dp,matrix);      
        int front=matrix[n][i]+memo(n+1,i+1,dp,matrix);
        int back=matrix[n][i]+memo(n+1,i-1,dp,matrix);

        dp[n][i]=Math.min(same,Math.min(front,back));
        return dp[n][i];    
    }
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;

        int[][] dp=new int[n][n];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            min=Math.min(min,memo(0,i,dp,matrix));
        }
        return min;
    }
}


#perfect

class Solution {
    /*public static int memo(int n,int i,int[][] dp,int[][] matrix){
        if(i<0 || i>=matrix.length) return (int)1e8;
        if(n==matrix.length-1) return matrix[n][i];

        if(dp[n][i]!=-1) return dp[n][i];

        int same=matrix[n][i]+memo(n+1,i,dp,matrix);      
        int front=matrix[n][i]+memo(n+1,i+1,dp,matrix);
        int back=matrix[n][i]+memo(n+1,i-1,dp,matrix);

        dp[n][i]=Math.min(same,Math.min(front,back));
        return dp[n][i];    
    }*/
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;

        int[][] dp=new int[n][n];
        
        for(int i=0;i<n;i++){
            dp[0][i]=matrix[0][i];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<n;j++){
                int same=matrix[i][j]+dp[i-1][j];
                int front=Integer.MAX_VALUE;
                if(j+1<n){
                    front=matrix[i][j]+dp[i-1][j+1];
                }
                int back=Integer.MAX_VALUE;
                if(j-1>=0){
                    back=matrix[i][j]+dp[i-1][j-1];
                }
                dp[i][j]=Math.min(same,Math.min(front,back));
            }
        }
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            min=Math.min(min,dp[n-1][i]);
        }
        return min;
    }
}


#space optimized

class Solution {
    /*public static int memo(int n,int i,int[][] dp,int[][] matrix){
        if(i<0 || i>=matrix.length) return (int)1e8;
        if(n==matrix.length-1) return matrix[n][i];

        if(dp[n][i]!=-1) return dp[n][i];

        int same=matrix[n][i]+memo(n+1,i,dp,matrix);      
        int front=matrix[n][i]+memo(n+1,i+1,dp,matrix);
        int back=matrix[n][i]+memo(n+1,i-1,dp,matrix);

        dp[n][i]=Math.min(same,Math.min(front,back));
        return dp[n][i];    
    }*/
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;

        int[] prev=new int[n];
        
        for(int i=0;i<n;i++){
            prev[i]=matrix[0][i];
        }
        for(int i=1;i<n;i++){
            int[] curr=new int[n];
            Arrays.fill(curr,0);
            for(int j=0;j<n;j++){
                int same=matrix[i][j]+prev[j];
                int front=Integer.MAX_VALUE;
                if(j+1<n){
                    front=matrix[i][j]+prev[j+1];
                }
                int back=Integer.MAX_VALUE;
                if(j-1>=0){
                    back=matrix[i][j]+prev[j-1];
                }
                curr[j]=Math.min(same,Math.min(front,back));
            }
            prev=curr;
        }
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            min=Math.min(min,prev[i]);
        }
        return min;
    }
}
