// User function Template for Java

class Solution {
    public static void dfs(int p,int k,char[][] mat,boolean[][] vis){
        int m=mat.length;
        int n=mat[0].length;
        vis[p][k]=true;
        
        if(p+1<m && mat[p+1][k]=='O' && !vis[p+1][k]){
            dfs(p+1,k,mat,vis);
        }
        if(p-1>=0 && mat[p-1][k]=='O' && !vis[p-1][k]){
            dfs(p-1,k,mat,vis);
        }
        if(k+1<n && mat[p][k+1]=='O' && !vis[p][k+1]){
            dfs(p,k+1,mat,vis);
        }
        if(k-1>=0 && mat[p][k-1]=='O' && !vis[p][k-1]){
            dfs(p,k-1,mat,vis);
        }
    }
    static char[][] fill(char mat[][]) {
        // code here
        int m=mat.length;
        int n=mat[0].length;
        
        boolean[][] vis=new boolean[m][n];
        for(boolean[] row:vis){
            Arrays.fill(row,false);
        }
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j]=='O' && (i==0 || i==m-1 || j==0 || j==n-1)){
                    dfs(i,j,mat,vis);
                }
            }
        }
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!vis[i][j] && mat[i][j]!='X'){
                    mat[i][j]='X';
                }
            }
        }
        return mat;
    }
}
