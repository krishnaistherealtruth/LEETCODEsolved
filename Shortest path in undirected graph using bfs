class Solution {
    // Function to find the shortest path from a source node to all other nodes
    public int[] shortestPath(ArrayList<ArrayList<Integer>> adj, int src) {
        // code here
        int[] dist=new int[adj.size()];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[src]=0;
        Queue<Integer> q=new LinkedList<>();
        
        boolean[] vis=new boolean[adj.size()];
        Arrays.fill(vis,false);
        
        q.offer(src);
        vis[src]=true;
        
        while(!q.isEmpty()){
            int node=q.peek();
            q.poll();
            
            for(Integer it:adj.get(node)){
                if(dist[node]+1<dist[it]){
                    dist[it]=dist[node]+1;
                }
            }
            
            for(Integer it:adj.get(node)){
                if(!vis[it]){
                    q.offer(it);
                    vis[it]=true;
                }
            }
        }
        for(int i=0;i<adj.size();i++){
            if(dist[i]==Integer.MAX_VALUE) dist[i]=-1;
        }
        return dist;
    }
}
