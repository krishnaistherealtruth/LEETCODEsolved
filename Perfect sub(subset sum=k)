class Solution {
    // Function to calculate the number of subsets with a given sum
    public static int count(int ind,int[] nums,int x,int[][] dp){
        if (ind == 0) {
            if (x == 0 && nums[0] == 0) return 2; // take or not take 0
            if (x == 0 || nums[0] == x) return 1;
            return 0;
        }
        if(dp[ind][x]!=-1) return dp[ind][x];
        int nottake=count(ind-1,nums,x,dp);
        int take=0;
        if(nums[ind]<=x){
            take=count(ind-1,nums,x-nums[ind],dp);
        }
        
        return dp[ind][x]=take+nottake;
    }
    public int perfectSum(int[] nums, int target) {
        // code here
        int n=nums.length;
        int[][] dp=new int[n][target+1];
        for(int[] row:dp)
        {
            Arrays.fill(row,-1);
        }
        
        return count(n-1,nums,target,dp);
    }
}
