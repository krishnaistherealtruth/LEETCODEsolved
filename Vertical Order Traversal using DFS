/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public static void inorder(TreeNode node,int col,int lev,TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>> map){
        if(node==null) return;
        if(!map.containsKey(col)){
                map.put(col,new TreeMap<>());
            }
            if(!map.get(col).containsKey(lev)){
                map.get(col).put(lev,new PriorityQueue<>());
            }
            map.get(col).get(lev).offer(node.val);

            inorder(node.left,col-1,lev+1,map);
            inorder(node.right,col+1,lev+1,map);
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        
        TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>> map=new TreeMap<>();
        
        inorder(root,0,0,map);
       
        List<List<Integer>> ans=new ArrayList<>();
        for(TreeMap<Integer,PriorityQueue<Integer>> ind: map.values()){
            ans.add(new ArrayList<>());
            for(PriorityQueue<Integer> pq:ind.values()){
                while(!pq.isEmpty()){
                    ans.get(ans.size()-1).add(pq.poll());
                }
            }
        }
        return ans;
    }
}
