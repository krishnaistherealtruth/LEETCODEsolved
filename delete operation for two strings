class Solution {
     public static int memo(int ind1,int ind2,String s1,String s2,int[][] dp){

        if(ind1<0 || ind2<0){
            return 0;
        }
        if(dp[ind1][ind2]!=-1) return dp[ind1][ind2];

        if(s1.charAt(ind1)==s2.charAt(ind2)){
            return dp[ind1][ind2]=1+memo(ind1-1,ind2-1,s1,s2,dp);
        }
        else{
            return dp[ind1][ind2]= Math.max(memo(ind1-1,ind2,s1,s2,dp),memo(ind1,ind2-1,s1,s2,dp));
        }
    }
    public int minDistance(String word1, String word2) {
        int n=word1.length();
        int m=word2.length();
        int[][] dp=new int[n][m];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        int len=memo(n-1,m-1,word1,word2,dp);
        int count=0;

        if(word1.length()<word2.length()){
            count=word2.length()-len;
            count=count+(word1.length()-len);
        }
        else{
            count=word1.length()-len;
            count=count+(word2.length()-len);
        }
        return count;
    }
}
