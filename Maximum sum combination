// User function Template for Java

class Solution {
    static List<Integer> maxCombinations(int N, int K, int A[], int B[]) {
            Arrays.sort(A);
            Arrays.sort(B);
            List<Integer> ans=new ArrayList<>();
            PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)-> Integer.compare(b[0], a[0]));
            Set<List<Integer>> set=new HashSet<>();
            pq.offer(new int[]{A[N-1]+B[N-1],N-1,N-1});
            set.add(Arrays.asList(N-1,N-1));
            while(K>0){
                int[] temp=pq.poll();
                int sum=temp[0];
                int i=temp[1];
                int j=temp[2];
                ans.add(sum);
                K--;
                
                if(!set.contains(Arrays.asList(i-1,j)) && i-1>=0){
                    pq.offer(new int[]{A[i-1]+B[j],i-1,j});
                    set.add(Arrays.asList(i-1,j));
                }
                if(!set.contains(Arrays.asList(i,j-1)) && j-1>=0){
                    pq.offer(new int[]{A[i]+B[j-1],i,j-1});
                    set.add(Arrays.asList(i,j-1));
                }
            }
            return ans;
        }
    }



