class Solution {
    public int orangesRotting(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        boolean[][] vis=new boolean[m][n];
        for(boolean[] row:vis){
            Arrays.fill(row,false);
        }
        int maxtime=0;
        Queue<int[]> q=new LinkedList<>();


        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2 && !vis[i][j]){
                    vis[i][j]=true;
                    q.offer(new int[]{i,j,0});
                }
            }
        }

        while(!q.isEmpty()){
            int[] node=q.poll();
            int p=node[0];
            int k=node[1];
            int c=node[2];

            maxtime=Math.max(maxtime,c);
            if(p+1<m && !vis[p+1][k] && grid[p+1][k]==1){
                vis[p+1][k]=true;
                grid[p+1][k]=2;
                q.offer(new int[]{p+1,k,c+1});
            }
            if(p-1>=0 && !vis[p-1][k] && grid[p-1][k]==1){
                vis[p-1][k]=true;
                grid[p-1][k]=2;
                q.offer(new int[]{p-1,k,c+1});
             }
            if(k+1<n && !vis[p][k+1] && grid[p][k+1]==1){
                vis[p][k+1]=true;
                grid[p][k+1]=2;
                q.offer(new int[]{p,k+1,c+1});
            }
             if(k-1>=0 && !vis[p][k-1] && grid[p][k-1]==1){
                vis[p][k-1]=true;
                grid[p][k-1]=2;
                q.offer(new int[]{p,k-1,c+1});
            }
        }

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }
        return maxtime;
    }
}
