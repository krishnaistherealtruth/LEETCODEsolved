// User function Template for Java

class Solution {
    static int memo(int n,int i,int[][] arr,int[][] dp){
        if(n<0) return 0;
        
        if(dp[n][i]!=-1){
            return dp[n][i];
        }
        
        int max=0;
        for(int ind=0;ind<3;ind++){
           if(ind!=i){
                int take=arr[n][ind]+memo(n-1,ind,arr,dp);
                max=Math.max(max,take);
           }
        }
        return dp[n][i]=max;
    }
    public int maximumPoints(int arr[][]) {
        // code here
        int[][] dp=new int[arr.length][4];
        for(int[] row: dp){
            Arrays.fill(row,-1);
        }
        return memo(arr.length-1,3,arr,dp);
    }
}




#Space optimized

// User function Template for Java

class Solution {
    public int maximumPoints(int arr[][]) {
        // code here
        int[] d=new int[4];
        d[0]=Math.max(arr[0][1],arr[0][2]);
        d[1]=Math.max(arr[0][0],arr[0][2]);
        d[2]=Math.max(arr[0][0],arr[0][1]);
        d[3]=Math.max(arr[0][0],Math.max(arr[0][1],arr[0][2]));
        
        for(int n=1;n<arr.length;n++){
            int[] temp=new int[4];
            for(int i=0;i<4;i++){
                temp[i]=0;
                for(int j=0;j<3;j++){
                    if(i!=j){
                        temp[i]=Math.max(temp[i],arr[n][j]+d[j]);
                    }
                }
            }
            d=temp;
        }
        
        return d[3];
    }
}
