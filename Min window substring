class Solution {
    public String minWindow(String s, String t) {
        if(t.length()>s.length()) return "";
        Map<Character,Integer> need=new HashMap<>();
        for(int i=0;i<t.length();i++){
            need.put(t.charAt(i),need.getOrDefault(t.charAt(i),0)+1);
        }

        int i=0;
        int cnt=0;
        int min=Integer.MAX_VALUE;
        int l=0;
        Map<Character,Integer> win=new HashMap<>();
        for(int j=0;j<s.length();j++){
            char c=s.charAt(j);
            win.put(c,win.getOrDefault(c,0)+1);

            if(need.containsKey(c) && need.get(c).intValue()==win.get(c).intValue()){
                cnt++;
            }

            while(i<=j && cnt==need.size()){
                if((j-i+1)<min){
                    min=(j-i+1);
                    l=i;
                }

                char leftc=s.charAt(i);
                win.put(leftc,win.get(leftc)-1);
                if(need.containsKey(leftc) && win.get(leftc)<need.get(leftc)){
                    cnt--;
                }
                i++;
            }
        }
        return min==Integer.MAX_VALUE?"":s.substring(l,l+min);
    }
}
