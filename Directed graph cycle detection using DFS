class Solution {
    static boolean dfs(int start,boolean[] vis,boolean[] pathvis,List<List<Integer>> adj){
        vis[start]=true;
        pathvis[start]=true;
        
        for(Integer it:adj.get(start)){
            if(vis[it]==false){
                if(dfs(it,vis,pathvis,adj)==true){
                    return true;
                }
            }
            else if(pathvis[it]==true){
                   return true;
            }
        }
        pathvis[start]=false;
        return false;
    }
    public boolean isCyclic(int V, int[][] edges) {
        // code here
        boolean[] vis=new boolean[V];
        boolean[] pathvis=new boolean[V];
        Arrays.fill(vis,false);
        Arrays.fill(pathvis,false);
        
        List<List<Integer>> adj=new ArrayList<>();
        
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(edges[i][1]);
        }
        
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(dfs(i,vis,pathvis,adj)==true){
                    return true;
                }
            }
        }
        return false;
    }
}
