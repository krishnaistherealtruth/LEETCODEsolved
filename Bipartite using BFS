class Solution {
    static boolean check(int[] vis,int start,int[][] graph){
        Queue<Integer> q=new LinkedList<>();
       

        q.offer(start);
        vis[start]=1;
        while(!q.isEmpty()){
            int node=q.poll();
            for(int i=0;i<graph[node].length;i++){
                if(vis[graph[node][i]]==-1){
                    q.offer(graph[node][i]);
                    vis[graph[node][i]]=(vis[node]==1)?0:1;
                }
                if(vis[graph[node][i]]==vis[node]){
                        return false;
                }
            }
        }
        return true;
    }
    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        
        int[] vis=new int[n];
         Arrays.fill(vis,-1);
         for(int i=0;i<graph.length;i++){
            if(vis[i]==-1){
                if(!check(vis,i,graph)){
                    return false;
                }
            }
         }
        return true;
    }
}
