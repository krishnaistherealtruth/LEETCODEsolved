#memoization

// User function Template for Java

class Solution {
    static int[] dp;
    static int solve(int[] arr,int n){
        if(n<0) return 0;
        
        if(dp[n]!=-1) return dp[n];
        
        int pick=arr[n]+solve(arr,n-2);
        
        int notpick=solve(arr,n-1);
        
        dp[n]=Math.max(pick,notpick);
        return dp[n];
    }
    int findMaxSum(int arr[]) {
        // code here
        dp=new int[arr.length];
        Arrays.fill(dp,-1);
        return solve(arr,arr.length-1);
    }
}


#tabular


// User function Template for Java

class Solution {
    static int[] dp;
    int findMaxSum(int arr[]) {
        // code here
        dp=new int[arr.length];
        Arrays.fill(dp,-1);
        
        if(arr.length>1){
            dp[0]=arr[0];
        }
        
        for(int i=1;i<arr.length;i++){
            int take=0;
            if(i>1){
                take=arr[i]+dp[i-2];
            }
            else{
                take=arr[i]+0;
            }
            int nottake=dp[i-1];
            dp[i]=Math.max(take,nottake);
        }
        return dp[arr.length-1];
    }
}


#space optimized

// User function Template for Java

class Solution {
    int findMaxSum(int arr[]) {
        // code here
       int prev2=0;
       int prev1=arr[0];
        for(int i=1;i<arr.length;i++){
            int curr=arr[i];
            int take=curr+prev2;
            int nottake=prev1;
            prev2=prev1;
            prev1=Math.max(take,nottake);
        }
        return prev1;
    }
}
