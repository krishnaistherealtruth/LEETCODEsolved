class Solution {
    public int leastInterval(char[] tasks, int n) {
        int time=0;
        int[] freq=new int[26];
        Arrays.fill(freq,0);
        for(char c:tasks){
            freq[c-'A']++;
        }
        PriorityQueue<int[]> pq=new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] a,int[] b){
                return -Integer.compare(a[0],b[0]);
            }
        });

        for(int i=0;i<26;i++){
            if(freq[i]>0){
                pq.add(new int[]{freq[i],0});
            }
        }

        Queue<int[]> q=new LinkedList<>();

        while(!pq.isEmpty() || !q.isEmpty()){
            if(!q.isEmpty() && (time-q.peek()[1])>n){
                pq.add(q.poll());
            }
            
            if(!pq.isEmpty()){
                int[] temp=pq.poll();
            
                int f=temp[0];
                int t=time;
                f-=1;
                if(f>0) q.add(new int[]{f,t});
            }
            time++;
        }
        return time;
    }
}




#optimised approach for counting

class Solution {
    public int leastInterval(char[] tasks, int n) {
        
        int freq[] = new int [26];
        for(char c:tasks){
            freq[c-'A']++;
        }
        Arrays.sort(freq);
        int maxfreq= freq[25];
        int maxcount =0;
        for(int i = 25;i>=0;i--){
            if(freq[i]==maxfreq){
                maxcount++;
            }else{
                break;
            }
        }

         int intervals = (maxfreq - 1) * (n + 1) + maxcount;
         return Math.max(tasks.length,intervals);
    }
}
