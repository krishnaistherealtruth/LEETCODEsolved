class Solution {
    static void dfs(int ind,boolean[] vis,Stack<Integer> st,List<List<Integer>> adj){
        vis[ind]=true;
        
        for(Integer it:adj.get(ind)){
            if(!vis[it]){
                dfs(it,vis,st,adj);
            }
        }
        st.push(ind);
    }
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        // code here
        boolean[] vis=new boolean[V];
        Arrays.fill(vis,false);
        
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(edges[i][1]);
        }
        ArrayList<Integer> ans=new ArrayList<>();
        Stack<Integer> st=new Stack<>();
        for(int i=0;i<V;i++){
            if(!vis[i]){
                dfs(i,vis,st,adj);
            }
        }
        while(!st.isEmpty()){
            ans.add(st.pop());
        }
        return ans;
    }
}
