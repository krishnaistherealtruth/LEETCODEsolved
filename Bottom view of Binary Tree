/*
class Node
{
    int data; //data of the node
    int hd; //horizontal distance of the node
    Node left, right; //left and right references

    // Constructor of tree node
    public Node(int key)
    {
        data = key;
        hd = Integer.MAX_VALUE;
        left = right = null;
    }
}
*/
class Tuple{
    Node node;
    int a;
    public Tuple(Node _node,int _a){
        node=_node;
        a=_a;
    }
}
class Solution {
    public ArrayList<Integer> bottomView(Node root) {
        // Code here
        Queue<Tuple> q=new LinkedList<>();
        
        TreeMap<Integer,Integer> map=new TreeMap<>();
        
        q.offer(new Tuple(root,0));
        
        while(!q.isEmpty()){
            int size=q.size();
            
            for(int i=0;i<size;i++){
                Tuple tuple=q.poll();
                Node node=tuple.node;
                int col=tuple.a;
                
                map.put(col,node.data);
                
                if(node.left!=null){
                    q.offer(new Tuple(node.left,col-1));
                }
                if(node.right!=null){
                    q.offer(new Tuple(node.right,col+1));
                }
            }
        }
        ArrayList<Integer> ans=new ArrayList<>();
        for(int key:map.keySet()){
            ans.add(map.get(key));
        }
        return ans;
    }
}
