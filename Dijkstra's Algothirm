class Pair{
    int dist;
    int node;
    Pair(int _dist,int _node){
        dist=_dist;
        node=_node;
    }
}
class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(new Pair(edges[i][2],edges[i][1]));
            adj.get(edges[i][1]).add(new Pair(edges[i][2],edges[i][0]));
        }
        PriorityQueue<Pair> pq=new PriorityQueue<>((x,y)-> x.dist - y.dist);
        int[] dt=new int[V];
        Arrays.fill(dt,Integer.MAX_VALUE);
        
        dt[src]=0;
        pq.offer(new Pair(0,src));
        
        while(!pq.isEmpty()){
            Pair pair=pq.poll();
            int dis=pair.dist;
            int node=pair.node;
            
            for(Pair p:adj.get(node)){
                if(dis+p.dist<dt[p.node]){
                    dt[p.node]=dis+p.dist;
                    pq.offer(new Pair(dis+p.dist,p.node));
                }
            }
        }
        return dt;
    }
}


#set approach

class Pair{
    int dist;
    int node;
    Pair(int _dist,int _node){
        dist=_dist;
        node=_node;
    }
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Pair)) return false;
        Pair p = (Pair) o;
        return dist == p.dist && node == p.node;
    }

    @Override
    public int hashCode() {
        return Objects.hash(dist, node);
    }
}
class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(new Pair(edges[i][2],edges[i][1]));
            adj.get(edges[i][1]).add(new Pair(edges[i][2],edges[i][0]));
        }
        Set<Pair> st = new TreeSet<>((x, y) -> {
            if (x.dist != y.dist) return Integer.compare(x.dist, y.dist);
                return Integer.compare(x.node, y.node);  // tie-breaker
        });

        int[] dt=new int[V];
        Arrays.fill(dt,Integer.MAX_VALUE);
        
        dt[src]=0;
        st.add(new Pair(0,src));
        
        while(!st.isEmpty()){
            int dis=0;
            int node=0;
            for(Pair pair:st){
                dis=pair.dist;
                node=pair.node;
                st.remove(pair);
                break;
            }
            
            for(Pair p:adj.get(node)){
                if(dis+p.dist<dt[p.node]){
                    if(dt[p.node]==Integer.MAX_VALUE){
                        st.add(new Pair(dis+p.dist,p.node));
                    }
                    else{
                        st.remove(new Pair(dt[p.node],p.node));
                        st.add(new Pair(dis+p.dist,p.node));
                    }
                    dt[p.node]=dis+p.dist;
                }
            }
        }
        return dt;
    }
}
