class Pair{
    int dist;
    int node;
    Pair(int _dist,int _node){
        dist=_dist;
        node=_node;
    }
}
class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(new Pair(edges[i][2],edges[i][1]));
            adj.get(edges[i][1]).add(new Pair(edges[i][2],edges[i][0]));
        }
        PriorityQueue<Pair> pq=new PriorityQueue<>((x,y)-> x.dist - y.dist);
        int[] dt=new int[V];
        Arrays.fill(dt,Integer.MAX_VALUE);
        
        dt[src]=0;
        pq.offer(new Pair(0,src));
        
        while(!pq.isEmpty()){
            Pair pair=pq.poll();
            int dis=pair.dist;
            int node=pair.node;
            
            for(Pair p:adj.get(node)){
                if(dis+p.dist<dt[p.node]){
                    dt[p.node]=dis+p.dist;
                    pq.offer(new Pair(dis+p.dist,p.node));
                }
            }
        }
        return dt;
    }
}
