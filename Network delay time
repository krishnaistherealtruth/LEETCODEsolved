class Pair{
    int node;
    int cost;
    Pair(int _node,int _cost){
        this.node=_node;
        this.cost=_cost;
    }
}
class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<times.length;i++){
            adj.get(times[i][0]-1).add(new Pair(times[i][1]-1,times[i][2]));
        }

        Queue<Pair> q=new LinkedList<>();

        int[] ct=new int[n];
        Arrays.fill(ct,Integer.MAX_VALUE);

        ct[k-1]=0;
        q.offer(new Pair(k-1,0));

        while(!q.isEmpty()){
            Pair pair=q.poll();
            int node=pair.node;
            int cos=pair.cost;

            for(Pair it:adj.get(node)){
                if(it.cost+cos<ct[it.node]){
                    ct[it.node]=it.cost+cos;
                    q.offer(new Pair(it.node,it.cost+cos));
                }
            }
        }
        int min=0;
        for(int i=0;i<n;i++){
            if(ct[i]==Integer.MAX_VALUE) return -1;
            if(ct[i]>min){
                min=ct[i];
            }
        }
        return min;
    }
}
