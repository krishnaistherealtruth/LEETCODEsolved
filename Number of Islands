#bfs approach

class Solution {
    public int numIslands(char[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int count=0;
        boolean[][] vis=new boolean[m][n];
        for(boolean[] row: vis){
            Arrays.fill(row,false);
        }
        Queue<int[]> q=new LinkedList<>();

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1' && !vis[i][j]){
                        vis[i][j]=true;
                        q.offer(new int[]{i,j});
                        while(!q.isEmpty()){
                            int[] node=q.poll();
                            int p=node[0];
                            int k=node[1];

                            if(p+1<m && !vis[p+1][k] && grid[p+1][k]!='0'){
                                vis[p+1][k]=true;
                                q.offer(new int[]{p+1,k});
                            }
                            if(p-1>=0 && !vis[p-1][k] && grid[p-1][k]!='0'){
                                vis[p-1][k]=true;
                                q.offer(new int[]{p-1,k});
                            }
                            if(k+1<n && !vis[p][k+1] && grid[p][k+1]!='0'){
                                vis[p][k+1]=true;
                                q.offer(new int[]{p,k+1});
                            }
                            if(k-1>=0 && !vis[p][k-1] && grid[p][k-1]!='0'){
                                vis[p][k-1]=true;
                                q.offer(new int[]{p,k-1});
                            }
                        }
                    count+=1; 
                }
            }
        }
        return count;
    }
}


#dfs approach(optimal)

class Solution {
    public static void dfs(int[] node,char[][] grid,boolean[][] vis){
        int p=node[0];
        int k=node[1];

        int m=grid.length;
        int n=grid[0].length;

        vis[p][k]=true;

        if(p+1<m && !vis[p+1][k] && grid[p+1][k]!='0'){
            dfs(new int[]{p+1,k},grid,vis);
        }
        if(p-1>=0 && !vis[p-1][k] && grid[p-1][k]!='0'){
           dfs(new int[]{p-1,k},grid,vis);
         }
        if(k+1<n && !vis[p][k+1] && grid[p][k+1]!='0'){
           dfs(new int[]{p,k+1},grid,vis);
        }
        if(k-1>=0 && !vis[p][k-1] && grid[p][k-1]!='0'){
            dfs(new int[]{p,k-1},grid,vis);
         }

    }
    public int numIslands(char[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int count=0;
        boolean[][] vis=new boolean[m][n];
        for(boolean[] row: vis){
            Arrays.fill(row,false);
        }

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1' && !vis[i][j]){
                    dfs(new int[]{i,j},grid,vis);
                    count+=1;                       
                }
            }
        }
        return count;
    }
}
